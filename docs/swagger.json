{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Auto-containerization platform API for building and deploying applications",
        "title": "MIRA API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@mira.dev"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:3000",
    "basePath": "/api",
    "paths": {
        "/auth/github/callback": {
            "get": {
                "description": "Handles the callback from GitHub OAuth and sets authentication cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "GitHub OAuth callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth authorization code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to application",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing authorization code",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "OAuth exchange failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/github/login": {
            "get": {
                "description": "Redirects to GitHub OAuth authorization page",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "GitHub OAuth login",
                "responses": {
                    "302": {
                        "description": "Redirect to GitHub OAuth",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/gitlab/callback": {
            "get": {
                "description": "Handles the callback from GitLab OAuth and sets authentication cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "GitLab OAuth callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth authorization code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to application",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing authorization code",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "OAuth exchange failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/gitlab/login": {
            "get": {
                "description": "Redirects to GitLab OAuth authorization page",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "GitLab OAuth login",
                "responses": {
                    "302": {
                        "description": "Redirect to GitLab OAuth",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/images/containerize": {
            "post": {
                "description": "Converts source code from Git repository into a Docker image and deploys to Crane Cloud",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "images"
                ],
                "summary": "Containerize source code",
                "parameters": [
                    {
                        "description": "Build configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.GenerateImageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Build started successfully",
                        "schema": {
                            "$ref": "#/definitions/models.BuildResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/images/detect": {
            "post": {
                "description": "Analyzes package.json and configuration files to detect JavaScript frameworks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "images"
                ],
                "summary": "Detect JavaScript framework from repository",
                "parameters": [
                    {
                        "description": "Repository URL",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.DetectFrameworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detected JavaScript frameworks",
                        "schema": {
                            "$ref": "#/definitions/models.FrameworkDetectionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or not a GitHub repository",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/logs/{buildId}/history": {
            "get": {
                "description": "Retrieves all historical logs for a specific build from JetStream storage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Get build logs history",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
                        "description": "Build ID",
                        "name": "buildId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Build logs retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.BuildLogsResponse"
                        }
                    },
                    "400": {
                        "description": "Build ID is required",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve logs",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/github/repos": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches repositories for the authenticated GitHub user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get GitHub repositories",
                "responses": {
                    "200": {
                        "description": "List of repositories",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GitHubRepository"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - no access token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "GitHub API request failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/gitlab/repos": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches repositories for the authenticated GitLab user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get GitLab repositories",
                "responses": {
                    "200": {
                        "description": "List of repositories",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GitLabProject"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - no access token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "GitLab API request failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.DetectFrameworkRequest": {
            "type": "object",
            "required": [
                "repo_url"
            ],
            "properties": {
                "repo_url": {
                    "type": "string",
                    "example": "https://github.com/user/repo"
                }
            }
        },
        "models.BuildData": {
            "type": "object",
            "properties": {
                "build_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "logs_url": {
                    "type": "string",
                    "example": "ws://localhost:3000/api/logs/550e8400-e29b-41d4-a716-446655440000"
                },
                "name": {
                    "type": "string",
                    "example": "my-app"
                }
            }
        },
        "models.BuildLogsResponse": {
            "type": "object",
            "properties": {
                "build_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "count": {
                    "type": "integer",
                    "example": 5
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LogMessage"
                    }
                }
            }
        },
        "models.BuildResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.BuildData"
                },
                "message": {
                    "type": "string",
                    "example": "Image generation started"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request format"
                }
            }
        },
        "models.FrameworkDetectionResponse": {
            "type": "object",
            "properties": {
                "frameworks": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string",
                    "example": "Framework detection completed"
                }
            }
        },
        "models.GitHubRepository": {
            "type": "object",
            "properties": {
                "clone_url": {
                    "type": "string",
                    "example": "https://github.com/user/my-repo.git"
                },
                "full_name": {
                    "type": "string",
                    "example": "user/my-repo"
                },
                "html_url": {
                    "type": "string",
                    "example": "https://github.com/user/my-repo"
                },
                "id": {
                    "type": "integer",
                    "example": 12345
                },
                "name": {
                    "type": "string",
                    "example": "my-repo"
                },
                "private": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "models.GitLabProject": {
            "type": "object",
            "properties": {
                "http_url_to_repo": {
                    "type": "string",
                    "example": "https://gitlab.com/user/my-project.git"
                },
                "id": {
                    "type": "integer",
                    "example": 67890
                },
                "name": {
                    "type": "string",
                    "example": "my-project"
                },
                "name_with_namespace": {
                    "type": "string",
                    "example": "user/my-project"
                },
                "visibility": {
                    "type": "string",
                    "example": "private"
                },
                "web_url": {
                    "type": "string",
                    "example": "https://gitlab.com/user/my-project"
                }
            }
        },
        "models.LogMessage": {
            "type": "object",
            "properties": {
                "build_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "level": {
                    "type": "string",
                    "example": "info"
                },
                "message": {
                    "type": "string",
                    "example": "Build started"
                },
                "step": {
                    "type": "string",
                    "example": "clone"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                }
            }
        },
        "schemas.GenerateImageRequest": {
            "type": "object",
            "required": [
                "access_token",
                "build_command",
                "name",
                "output_directory",
                "project_id",
                "repo"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "build_command": {
                    "type": "string",
                    "example": "npm run build"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "example": "my-app"
                },
                "output_directory": {
                    "type": "string",
                    "example": "dist"
                },
                "project_id": {
                    "type": "string",
                    "example": "proj-123"
                },
                "repo": {
                    "type": "string",
                    "example": "https://github.com/user/repo.git"
                },
                "ssr": {
                    "type": "boolean",
                    "example": false
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}